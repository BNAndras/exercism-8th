\ affine cipher task from exercism

26 var, ac-m \ roman alphabet assumed
var ac-a
var ac-b
var ac-i

: intxt> \ s -- s
true s:fold /[^0-9a-z]/ s:/ "" a:join ;

: >outxt \ s -- s
[5] s:/ " " a:join ;

: 2mmi \ n -- n
( dup I n:* ac-m @ n:mod 1 n:= if drop I break then ) ac-m @ times ;

: setup \ s n n -- s | T
ac-b !
dup ac-a !
ac-m @ n:gcd 1 n:= !if false ;then
ac-a @ 2mmi ac-i !
intxt> ;

: encode \ n -- n
dup 'a n:1- n:> if 'a n:- ac-a @ n:* ac-b @ n:+ ac-m @ n:mod 'a n:+ then ;

: decode \ n -- n
dup 'a n:1- n:> if 'a n:- ac-b @ n:- ac-i @ n:* ac-m @ n:mod 'a n:+ then ;

: >code \ s n n -- s
setup ns:T isa? !if ' encode s:map >outxt else 2drop null then ;

: code> \ s n n -- s
setup ns:T isa? !if ' decode s:map else 2drop null then ;

\ : test
\ "Test 1 : 'test' 5 7 " .
\ "encode: " . "test" 5 7 >code dup  . " decode: " . 5 7 code> . cr
\ "Test 2 : 'kqlfd jzvgy tpaet icdhm rtwly kqlon ubstx' 19 13 " .
\ "decode: " . "kqlfd jzvgy tpaet icdhm rtwly kqlon ubstx" 19 13 code> . cr
\ ;

